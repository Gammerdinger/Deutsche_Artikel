[{"name":"app.R","content":"library(shiny)\nlibrary(tidyverse)\nlibrary(googlesheets4)\n\nui <- fluidPage(\n  # Custom CSS to make text larger\n  tags$head(\n    tags$style(HTML(\"\n      .large-text {\n        font-size: 24px; /* Change to desired font size */\n        font-weight: bold; /* Optional: makes the text bold */\n      }\n    \"))\n  ),\n  \n  # Use a div with class to apply the CSS\n  div(class = \"large-text\", textOutput(\"noun\")),\n  \n  # Space for radio buttons of the German articles\n  uiOutput(\"article_ui\"),\n  # Space for the check button\n  uiOutput(\"check_ui\"),\n  # Print the response to the guess\n  textOutput(\"response\"),\n  # Space for the next noun button\n  uiOutput(\"next_noun_ui\")\n)\n\nserver <- function(input, output, session) {\n  \n  # Reactive value to store the vocabulary table\n  vocab_tb <- reactive({\n    read_sheet(\"https://docs.google.com/spreadsheets/d/1GB9TdztSkodFtrHr8_6OyndV6NINp0pg32BhkqOo9_I/edit?usp=sharing\")\n  })\n  \n  # Reactive values for state management\n  entry <- reactiveVal()\n  single_plural <- reactiveVal()\n  response <- reactiveVal(\"\")\n  radio_visible <- reactiveVal(TRUE)\n  check_visible <- reactiveVal(FALSE)\n  \n  # Function to update entry and single_plural to new values\n  updateNoun <- function() {\n    new_entry <- round(runif(n = 1, min = 1, max = dim(vocab_tb())[1]))\n    new_single_plural <- round(runif(n = 1, min = 2, max = 3))\n    entry(new_entry)\n    single_plural(new_single_plural)\n    response(\"\")  # Reset response when a new noun is selected\n    radio_visible(TRUE)  # Show the radio buttons\n    check_visible(FALSE)  # Hide the check button initially\n  }\n  \n  # Initialize values on startup\n  observe({\n    updateNoun()\n  })\n  \n  # Render the radio buttons conditionally\n  output$article_ui <- renderUI({\n    if (isTRUE(radio_visible())) {\n      radioButtons(\"article\", \"Welcher Artikel passt zu diesem Nomen?\", \n                   choices = c(\"der\", \"die\", \"das\"), \n                   inline = TRUE, \n                   selected = character(0))\n    }\n  })\n  \n  # Determine if an article is selected to show the check button\n  observeEvent(input$article, {\n    if (input$article %in% c(\"der\", \"die\", \"das\")) {\n      check_visible(TRUE)\n    } else {\n      check_visible(FALSE)\n    }\n  })\n  \n  # Render check button conditionally\n  output$check_ui <- renderUI({\n    if (isTRUE(check_visible())) {\n      actionButton(\"check\", \"Überprüfe meine Antwort!\")\n    }\n  })\n  \n  # Render next noun button conditionally\n  output$next_noun_ui <- renderUI({\n    if (!isTRUE(radio_visible())) {\n      actionButton(\"next_noun\", \"Nächstes Nomen!\")\n    }\n  })\n  \n  # Extract and display the noun\n  output$noun <- renderText({\n    req(entry(), single_plural())  # Ensure values are available\n    as.character(vocab_tb()[entry(), single_plural()])\n  })\n  \n  # Check the user's response for correctness\n  observeEvent(input$check, {\n    req(entry(), single_plural())  # Ensure values are available\n    \n    correct_article <- if (single_plural() == 2) {\n      as.character(vocab_tb()[entry(), \"Article\"])\n    } else {\n      \"die\"\n    }\n    \n    if (single_plural() == 2 && input$article == correct_article || single_plural() == 3 && input$article == \"die\") {\n      response(paste0(\"Richtig! Der Artikel ist \", correct_article, \".\"))\n    } else {\n      response(paste0(\"Falsch! Der richtige Artikel ist \", correct_article, \".\"))\n    }\n    \n    # Switch visibility\n    radio_visible(FALSE)  # Hide the radio buttons\n    check_visible(FALSE)  # Hide the check button after checking\n  })\n  \n  # Update values when \"Next Noun!\" button is clicked\n  observeEvent(input$next_noun, {\n    updateNoun()\n    updateRadioButtons(session, \"article\", selected = character(0))  # Clear the radio button selection\n  })\n  \n  output$response <- renderText({\n    response()\n  })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"German_app.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
